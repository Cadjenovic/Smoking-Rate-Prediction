}
for(row in 1:nrow(cols.to.divide)){
if(grepl("/", as.character(cols.to.divide[row, 3]), fixed = TRUE)){
if(!cols.to.divide[row,3] == ".../..."){
z <- strsplit(as.character(cols.to.divide[row, 3]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol3[row, 3] <- broj
}
}
}
for(row in 1:nrow(cols.to.divide)){
if(grepl("/", as.character(cols.to.divide[row, 4]), fixed = TRUE)){
if(!cols.to.divide[row,4] == ".../..."){
z <- strsplit(as.character(cols.to.divide[row, 4]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol4[row, 4] <- broj
}
}
}
for(row in 1:114){
if(grepl("/", as.character(cols.to.divide[row, 4]), fixed = TRUE)){
if(!cols.to.divide[row,4] == ".../..."){
z <- strsplit(as.character(cols.to.divide[row, 4]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol4[row, 4] <- broj
}
}
}
for(row in 1:114){
if(grepl("/", as.character(cols.to.divide[row, 4]), fixed = TRUE)){
z <- strsplit(as.character(cols.to.divide[row, 4]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol4[row, 4] <- broj
}
}
for(row in 1:114){
if(grepl("/", as.character(cols.to.divide[row, 4]), fixed = TRUE)){
z <- strsplit(as.character(cols.to.divide[row, 4]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol4[row, 1] <- broj
}
}
kol4
cols.to.divide[,4] <- kol4
for(row in 1:114){
if(grepl("/", as.character(cols.to.divide[row, 5]), fixed = TRUE)){
if(!cols.to.divide[row,4] == ".../..."){
z <- strsplit(as.character(cols.to.divide[row, 5]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol5[row, 1] <- broj
}
}
}
kol5
View(kol5)
View(kol5)
is.numeric(-99)
is.numeric(-99/24)
is.numeric("-99/24")
as.numeric("-99/24")
cols.to.divide[,5] <- kol5
for(row in 1:114){
if(grepl("/", as.character(cols.to.divide[row, 6]), fixed = TRUE)){
if(!cols.to.divide[row,6] == ".../..."){
z <- strsplit(as.character(cols.to.divide[row, 6]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol6[row, 1] <- broj
}
}
}
cols.to.divide[,6] <- kol6
for(row in 1:114){
if(grepl("/", as.character(cols.to.divide[row, 7]), fixed = TRUE)){
if(!cols.to.divide[row,7] == ".../..."){
z <- strsplit(as.character(cols.to.divide[row, 7]), "/")
#print(z)
broj <- as.numeric(z[[1]][1]) / as.numeric(z[[1]][2])
kol7[row, 1] <- broj
}
}
}
cols.to.divide[,7] <- kol7
str(y)
View(y)
View(y)
View(y)
View(y)
p <- data.frame()
p <- y
p <- cbind(p, cols.to.divide)
p
p <- cbind(p, x[,c(1,2)])
View(p)
p <- p[,names(x)]
p
View(p)
write.csv(p, "final-data")
write.csv(p, "final-data.csv")
final.data <- read.csv("final-data.csv")
View(final.data)
View(final.data)
str(final.data)
summary(final.data$Region)
unique(final.data$Region)
length(unique(final.data$Region))
numeric.data <- final.data[-c(1,2),]
str(numeric.data)
numeric.data <- final.data[,-c(1,2)]
str(numeric.data)
apply(X = numeric.data, MARGIN = 2, FUN = normalize(x))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
apply(X = numeric.data, MARGIN = 2, FUN = normalize(x))
apply(X = numeric.data, MARGIN = 2, FUN = normalize(x))
numeric.data$Population.in.thousands..2017. <- as.numeric(numeric.data$Population.in.thousands..2017.)
numeric.data$GDP..Gross.domestic.product..million.current.US.. <- as.numeric(GDP..Gross.domestic.product..million.current.US..)
numeric.data$GDP..Gross.domestic.product..million.current.US.. <- as.numeric(GDP..Gross.domestic.product..million.current.US..)
numeric.data$GDP..Gross.domestic.product..million.current.US.. <- as.numeric(numeric.data$GDP..Gross.domestic.product..million.current.US..)
str(numeric.data)
apply(X = numeric.data, MARGIN = 2, FUN = normalize(x))
max <- apply(data, 2, max)
max <- apply(numeric.data, 2, max)
min <- apply(numeric.data, 2, min)
numeric.data.norm <- as.data.frame(scale(numeric.data, center = min, scale = max - min))
numeric.data.norm
View(numeric.data.norm)
View(numeric.data.norm)
max <- apply(numeric.data, 2, max, na.rm = T)
min <- apply(numeric.data, 2, min, na.rm = T)
numeric.data.norm <- as.data.frame(scale(numeric.data, center = min, scale = max - min))
numeric.data.norm
library(caret)
train.indices <- createDataPartition(numeric.data.norm$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data.norm[, train.indices]
train.data <- numeric.data.norm[,train.indices]
train.data <- numeric.data.norm[train.indices,]
test.data <- numeric.data.norm[-train.indices,]
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = trian.data, hidden = c(20, 5), linear.output = T)
train.indices <- createDataPartition(numeric.data.norm$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data.norm[train.indices,]
test.data <- numeric.data.norm[-train.indices,]
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = trian.data, hidden = c(20, 5), linear.output = T)
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(20, 5), linear.output = T)
numeric.data.norm <- as.data.frame(lapply(numeric.data, normalize))
View(numeric.data.norm)
View(numeric.data.norm)
data <- read.csv("final-data.csv")
str(data)
numeric.data$Population.in.thousands..2017. <- as.numeric(numeric.data$Population.in.thousands..2017.)
numeric.data$GDP..Gross.domestic.product..million.current.US.. <- as.numeric(numeric.data$GDP..Gross.domestic.product..million.current.US..)
str(data)
numeric.data <- data[,-c(1,2)]
numeric.data$Population.in.thousands..2017. <- as.numeric(numeric.data$Population.in.thousands..2017.)
numeric.data$GDP..Gross.domestic.product..million.current.US.. <- as.numeric(numeric.data$GDP..Gross.domestic.product..million.current.US..)
str(data)
str(numeric.data)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
numeric.data.norm <- as.data.frame(lapply(numeric.data, normalize))
set.seed(123)
train.indices <- createDataPartition(numeric.data.norm$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data.norm[train.indices,]
test.data <- numeric.data.norm[-train.indices,]
which(complete.cases(numeric.data))
View(numeric.data)
View(numeric.data)
which(complete.cases(numeric.data)==F)
length(which(complete.cases(numeric.data)==F))
list_na <- colnames(numeric.data)[ apply(numeric.data, 2, anyNA)]
list_na
cols.with.na <- colnames(numeric.data)[ apply(numeric.data, 2, anyNA)]
cols.with.na
length(which(complete.cases(numeric.data)==F))
median.missing <- apply(numeric.data[,colnames(numeric.data) %in% cols.with.na], 2, median, na.rm = T)
median.missing
numeric.data.replace <- numeric.data %>%
mutate(Employment..Industry....of.employed. = ifelse(is.na(Employment..Industry....of.employed.), median_missing[1], Employment..Industry....of.employed.),
Employment..Services....of.employed. = ifelse(is.na(Employment..Services....of.employed.), median_missing[2], Employment..Services....of.employed.))
library(dplyr)
numeric.data.replace <- numeric.data %>%
mutate(Employment..Industry....of.employed. = ifelse(is.na(Employment..Industry....of.employed.), median_missing[1], Employment..Industry....of.employed.),
Employment..Services....of.employed. = ifelse(is.na(Employment..Services....of.employed.), median_missing[2], Employment..Services....of.employed.))
numeric.data.replace <- numeric.data %>%
mutate(Employment..Industry....of.employed. = ifelse(is.na(Employment..Industry....of.employed.), median.missing[1], Employment..Industry....of.employed.),
Employment..Services....of.employed. = ifelse(is.na(Employment..Services....of.employed.), median.missing[2], Employment..Services....of.employed.))
View(numeric.data.replace)
View(numeric.data.replace)
numeric.data.replace <- numeric.data %>%
mutate(Employment..Industry....of.employed. = ifelse(is.na(Employment..Industry....of.employed.), median.missing[1], Employment..Industry....of.employed.),
Employment..Services....of.employed. = ifelse(is.na(Employment..Services....of.employed.), median.missing[2], Employment..Services....of.employed.),
Unemployment....of.labour.force. = ifelse(is.na(Unemployment....of.labour.force.), median.missing[3], Unemployment....of.labour.force.))
numeric.data.replace <- numeric.data %>%
mutate(Employment..Industry....of.employed. = ifelse(is.na(Employment..Industry....of.employed.), median.missing[1], Employment..Industry....of.employed.),
Employment..Services....of.employed. = ifelse(is.na(Employment..Services....of.employed.), median.missing[2], Employment..Services....of.employed.),
Unemployment....of.labour.force. = ifelse(is.na(Unemployment....of.labour.force.), median.missing[3], Unemployment....of.labour.force.),
Labour.force.participation..female.male.pop.... = ifelse(is.na(Labour.force.participation..female.male.pop....), median.missing[4], Labour.force.participation..female.male.pop....),
Population.growth.rate..average.annual... = ifelse(is.na(Population.growth.rate..average.annual...), median.missing[5], Population.growth.rate..average.annual...),
Urban.population.growth.rate..average.annual... = ifelse(is.na(Urban.population.growth.rate..average.annual...), median.missing[6], Urban.population.growth.rate..average.annual...),
Education..Government.expenditure....of.GDP = ifelse(is.na(Education..Government.expenditure....of.GDP), median.missing[7], Education..Government.expenditure....of.GDP),
Education..Primary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Primary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[8], Education..Primary.gross.enrol..ratio..f.m.per.100.pop..),
Education..Secondary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Secondary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[9], Education..Secondary.gross.enrol..ratio..f.m.per.100.pop..),
Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[10], Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop..))
numeric.data.replace <- numeric.data %>%
mutate(Employment..Industry....of.employed. = ifelse(is.na(Employment..Industry....of.employed.), median.missing[1], Employment..Industry....of.employed.),
Employment..Services....of.employed. = ifelse(is.na(Employment..Services....of.employed.), median.missing[2], Employment..Services....of.employed.),
Unemployment....of.labour.force. = ifelse(is.na(Unemployment....of.labour.force.), median.missing[3], Unemployment....of.labour.force.),
Labour.force.participation..female.male.pop.... = ifelse(is.na(Labour.force.participation..female.male.pop....), median.missing[4], Labour.force.participation..female.male.pop....),
Population.growth.rate..average.annual... = ifelse(is.na(Population.growth.rate..average.annual...), median.missing[5], Population.growth.rate..average.annual...),
Urban.population.growth.rate..average.annual... = ifelse(is.na(Urban.population.growth.rate..average.annual...), median.missing[6], Urban.population.growth.rate..average.annual...),
Education..Government.expenditure....of.GDP. = ifelse(is.na(Education..Government.expenditure....of.GDP.), median.missing[7], Education..Government.expenditure....of.GDP.),
Education..Primary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Primary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[8], Education..Primary.gross.enrol..ratio..f.m.per.100.pop..),
Education..Secondary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Secondary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[9], Education..Secondary.gross.enrol..ratio..f.m.per.100.pop..),
Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[10], Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop..))
length(which(complete.cases(numeric.data.replace) == F)
length(which(complete.cases(numeric.data.replace)==F))
length(which(complete.cases(numeric.data.replace)==F))
length(which(complete.cases(numeric.data)==F))
numeric.data <- numeric.data %>%
mutate(Employment..Industry....of.employed. = ifelse(is.na(Employment..Industry....of.employed.), median.missing[1], Employment..Industry....of.employed.),
Employment..Services....of.employed. = ifelse(is.na(Employment..Services....of.employed.), median.missing[2], Employment..Services....of.employed.),
Unemployment....of.labour.force. = ifelse(is.na(Unemployment....of.labour.force.), median.missing[3], Unemployment....of.labour.force.),
Labour.force.participation..female.male.pop.... = ifelse(is.na(Labour.force.participation..female.male.pop....), median.missing[4], Labour.force.participation..female.male.pop....),
Population.growth.rate..average.annual... = ifelse(is.na(Population.growth.rate..average.annual...), median.missing[5], Population.growth.rate..average.annual...),
Urban.population.growth.rate..average.annual... = ifelse(is.na(Urban.population.growth.rate..average.annual...), median.missing[6], Urban.population.growth.rate..average.annual...),
Education..Government.expenditure....of.GDP. = ifelse(is.na(Education..Government.expenditure....of.GDP.), median.missing[7], Education..Government.expenditure....of.GDP.),
Education..Primary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Primary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[8], Education..Primary.gross.enrol..ratio..f.m.per.100.pop..),
Education..Secondary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Secondary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[9], Education..Secondary.gross.enrol..ratio..f.m.per.100.pop..),
Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop.. = ifelse(is.na(Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop..), median.missing[10], Education..Tertiary.gross.enrol..ratio..f.m.per.100.pop..))
length(which(complete.cases(numeric.data)==F))
numeric.data <- data.frame(
sapply(
numeric.data,
function(x) ifelse(is.na(x),
median(x, na.rm = TRUE),
x)))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
numeric.data <- as.data.frame(lapply(numeric.data, normalize))
library(neuralnet)
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(20, 5), linear.output = T)
set.seed(123)
train.indices <- createDataPartition(numeric.data.norm$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data.norm[train.indices,]
test.data <- numeric.data.norm[-train.indices,]
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(20, 5), linear.output = T)
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = 12, linear.output = T)
set.seed(123)
train.indices <- createDataPartition(numeric.data$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data[train.indices,]
test.data <- numeric.data[-train.indices,]
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = 12, linear.output = T)
plot(nnet)
nnpred <- compute(nnet, test.data[,1:31])
nnpred <- compute(nn,test.data[,1:31])
nnpred <- compute(nnet,test.data[,1:31])
nnpred <- predict.nn(nnet, test.data[,1:31])
nnpred <- predict(nnet, test.data[,1:31])
nnpred <- predict(nnet, test.data[,1:22])
nnpred
head(test.data$Total.Smoking.Rate)
head(nnpred)
View(test.data)
View(test.data)
nnpred$net
nnpred <- predict(nnet, test.data[,1:22])
table(true = test.data$Total.Smoking.Rate, predicted = nnpred)
prop.table(table(true = test.data$Total.Smoking.Rate, predicted = nnpred))
test.data <- rbind(test.data, nnpred)
test.data <- cbind(test.data, nnpred)
View(test.data)
View(test.data)
table(test.data$Total.Smoking.Rate, apply(nnpred, 1, which.max))
table(test.data$Total.Smoking.Rate, nnpred)
nnpred <- nnpred * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
test.r <- (test.data$Total.Smoking.Rate) * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
head(nnpred)
head(test.data)
head(nnpred)
head(test.data$Total.Smoking.Rate)
head(test.r)
mse.nn <- sum((test.r - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.r, nnpred)
mae.nn <- mae.nn(test.r, nnpred)
library(Metrics)
install.packages("Metrics")
library(Metrics)
mae.nn <- mae(test.r, nnpred)
mae.nn
mape.nn <- mape(test.r, nnpred)
mape.nn
nnpred <- predict(nnet, test.data[,1:22])
mse.nn <- sum((test.data - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.data, nnpred)
mae.nn
mape.nn <- mape(test.data, nnpred)
mape.nn
mse.nn <- sum((test.data - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.data, nnpred)
mae.nn
mape.nn <- mape(test.data, nnpred)
mape.nn
mse.nn <- sum((test.data$Total.Smoking.Rate - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.data$Total.Smoking.Rate, nnpred)
mae.nn
mape.nn <- mape(test.data$Total.Smoking.Rate, nnpred)
mape.nn
set.seed(123)
train.indices <- createDataPartition(numeric.data$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data[train.indices,]
test.data <- numeric.data[-train.indices,]
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6), linear.output = T)
plot(nnet)
nnpred <- predict(nnet, test.data[,1:22])
nnpred <- predict(nnet, test.data[,1:22])
test.data <- cbind(test.data, nnpred)
nnpred <- nnpred * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
test.r <- (test.data$Total.Smoking.Rate) * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
head(nnpred)
head(test.r)
mse.nn <- sum((test.data$Total.Smoking.Rate - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.data$Total.Smoking.Rate, nnpred)
mae.nn
mape.nn <- mape(test.data$Total.Smoking.Rate, nnpred)
mape.nn
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6,6), linear.output = T)
nnpred <- predict(nnet, test.data[,1:22])
test.data <- cbind(test.data, nnpred)
nnpred <- nnpred * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
test.r <- (test.data$Total.Smoking.Rate) * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
head(nnpred)
head(test.r)
mse.nn <- sum((test.data$Total.Smoking.Rate - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.data$Total.Smoking.Rate, nnpred)
mae.nn
mape.nn <- mape(test.data$Total.Smoking.Rate, nnpred)
mape.nn
View(test.data)
View(test.data)
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6), linear.output = T)
nnpred <- predict(nnet, test.data[,1:22])
test.data <- cbind(test.data, nnpred)
nnpred <- nnpred * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
test.r <- (test.data$Total.Smoking.Rate) * (max(data$Total.Smoking.Rate) - min(data$Total.Smoking.Rate)) + min(data$Total.Smoking.Rate)
head(nnpred)
head(test.r)
mse.nn <- sum((test.data$Total.Smoking.Rate - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.data$Total.Smoking.Rate, nnpred)
mae.nn
mape.nn <- mape(test.data$Total.Smoking.Rate, nnpred)
mape.nn
head(test.data)
main.comp <- prcomp(train.data)
summary(main.comp)
main.comp <- prcomp(numeric.data)
summary(main.comp)
new.data <- numeric.data[,c(1:11)]
summary(new.data)
main.comp$x
main.comp$x[,1:8]
new.data <- main.comp$x[,1:8]
summary(new.data)
main.comp <- prcomp(numeric.data)
summary(main.comp)
numeric.data <- cbind(numeric.data, new.data)
train.data2 <- numeric.data[train.indices,]
test.data2 <- numeric.data[-train.indices,]
new.data <- main.comp$x[,1:11]
numeric.data <- cbind(numeric.data, new.data)
numeric.data[,c(24:42)] <- NULL
numeric.data <- cbind(numeric.data, new.data)
nnet2 <- neuralnet(Total.Smoking.Rate ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11, data = train.data2, hidden = c(12,6), linear.output = T)
train.data2 <- numeric.data[train.indices,]
test.data2 <- numeric.data[-train.indices,]
nnet2 <- neuralnet(Total.Smoking.Rate ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11, data = train.data2, hidden = c(12,6), linear.output = T)
nnpred2 <- predict(nnet2, test.data2)
head(test.data2)
head(test.data2$Total.Smoking.Rate)
head(nnpred2)
mse.nn2 <- sum((test.data2$Total.Smoking.Rate - nnpred2)^2)  / nrow(test.data2)
mse.nn2
mae.nn2 <- mae(test.data2$Total.Smoking.Rate, nnpred2)
mae.nn2
mape.nn2 <- mape(test.data2$Total.Smoking.Rate, nnpred2)
mape.nn2
numeric.data
summary(numeric.data)
str(numeric.data)
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6), linear.output = T)
library(neuralnet)
library(Metrics)
set.seed(123)
train.indices <- createDataPartition(numeric.data$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data[train.indices,]
test.data <- numeric.data[-train.indices,]
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6), linear.output = T)
library(caret)
library(neuralnet)
library(Metrics)
library(caret)
set.seed(123)
train.indices <- createDataPartition(numeric.data$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data[train.indices,]
test.data <- numeric.data[-train.indices,]
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6), linear.output = T)
plot(nnet)
View(new.data)
numeric.data <- numeric.data[,-c(27:34)]
str(numeric.data)
numeric.data <- numeric.data[,-c(24:27)]
str(numeric.data)
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6), linear.output = T)
plot(nnet)
set.seed(123)
train.indices <- createDataPartition(numeric.data$Total.Smoking.Rate, p = .7, list = F)
train.data <- numeric.data[train.indices,]
test.data <- numeric.data[-train.indices,]
nnet <- neuralnet(Total.Smoking.Rate ~ ., data = train.data, hidden = c(12,6), linear.output = T)
plot(nnet)
nnpred <- predict(nnet, test.data[,1:22])
nnpred
test.data <- cbind(test.data, nnpred)
test.data
test.data$Total.Smoking.Rate
nnpred
mse.nn <- sum((test.data$Total.Smoking.Rate - nnpred)^2)  / nrow(test.data)
mse.nn
mae.nn <- mae(test.data$Total.Smoking.Rate, nnpred)
mae.nn
mape.nn <- mape(test.data$Total.Smoking.Rate, nnpred)
mape.nn
mse.nn
mae.nn
mape.nn
main.comp <- prcomp(numeric.data)
summary(main.comp)
new.data <- main.comp$x[,1:11]
summary(new.data)
train.data2 <- new.data[train.indices,]
test.data2 <- new.data[-train.indices,]
train.data2 <- numeric.data[train.indices,]
test.data2 <- numeric.data[-train.indices,]
nnet2 <- neuralnet(Total.Smoking.Rate ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11, data = train.data2, hidden = c(12,6), linear.output = T)
nnet2 <- neuralnet(Total.Smoking.Rate ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11, data = train.data2, hidden = c(12,6), linear.output = T)
numeric.data[,c(24:42)] <- NULL
numeric.data <- cbind(numeric.data, new.data)
train.data2 <- numeric.data[train.indices,]
test.data2 <- numeric.data[-train.indices,]
nnet2 <- neuralnet(Total.Smoking.Rate ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11, data = train.data2, hidden = c(12,6), linear.output = T)
nnpred2 <- predict(nnet2, test.data2)
head(test.data2$Total.Smoking.Rate)
head(nnpred2)
mse.nn2 <- sum((test.data2$Total.Smoking.Rate - nnpred2)^2)  / nrow(test.data2)
mse.nn2
mae.nn2 <- mae(test.data2$Total.Smoking.Rate, nnpred2)
mae.nn2
mape.nn2 <- mape(test.data2$Total.Smoking.Rate, nnpred2)
mape.nn2
plot(nnet2)
plot(nnet2)
mse.nn2 <- sum((test.data2$Total.Smoking.Rate - nnpred2)^2)  / nrow(test.data2)
mse.nn2
mae.nn2 <- mae(test.data2$Total.Smoking.Rate, nnpred2)
mae.nn2
mape.nn2 <- mape(test.data2$Total.Smoking.Rate, nnpred2)
mape.nn2
mse.nn2
mae.nn2
mape.nn2
str(numeric.data)
vis.data <- numeric.data[,-c(26,34)]
str(vis.data)
vis.data <- numeric.data[,-c(22,34)]
str(vis.data)
vis.data <- numeric.data[,-c(24,32)]
str(vis.data)
vis.data <- numeric.data[,-c(24:32)]
str(vis.data)
vis.data <- numeric.data[,-c(22:32)]
str(vis.data)
vis.data <- numeric.data[,-c(24:32)]
str(vis.data)
vis.data <- numeric.data[,-c(22:32)]
str(vis.data)
str(numeric.data)
vis.data <- numeric.data[,-c(24:34)]
str(vis.data)
corr.mat <- cor(vis.data)
corrplot(corr.mat)
library(corrplot)
corrplot(corr.mat)
corrplot(corr.mat, tl.pos = 'n')
corrplot.mixed(corr.mat, tl.pos = 'n')
